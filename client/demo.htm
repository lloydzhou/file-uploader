<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<link href="fileuploader.css" rel="stylesheet" type="text/css">	
    <style>    	
		body {font-size:13px; font-family:arial, sans-serif; width:700px; margin:100px auto;}
    </style>	
</head>
<body>		
    <p><a href="http://github.com/valums/file-uploader">Back to project page</a></p>
    
	<p>To upload a file, click on the button below. Drag-and-drop is supported in FF, Chrome.</p>
	<p>Progress-bar is supported in FF3.6+, Chrome6+, Safari4+</p>
	
	<div id="file-uploader-demo1">		
		<noscript>			
			<p>Please enable JavaScript to use file uploader.</p>
			<!-- or put a simple form for upload here -->
		</noscript>         
	</div>

	<div class="qq-upload-extra-drop-area">Drop files here too</div>
    <input type="file" >
    <script src="fileuploader.js" type="text/javascript"></script>
	<script src="fileuploader.resume.js" type="text/javascript"></script>
    <script>        
        function createUploader(){            
            var uploader = new qq.FileUploader({
                element: document.getElementById('file-uploader-demo1'),
                action: 'do-nothing.htm',
                debug: true,
                resume: true,
                extraDropzones: [qq.getByClass(document, 'qq-upload-extra-drop-area')[0]]
            });           
        }
        
        // in your app create uploader as soon as the DOM is ready
        // don't wait for the window to load  
        window.onload = createUploader;     

		window.BlobBuilder = window.MozBlobBuilder || window.WebKitBlobBuilder || window.BlobBuilder;
		
		function upload(blobOrFile) {
			var xhr = new XMLHttpRequest();
			xhr.open('POST', '/server', true);
			xhr.onload = function(e) { 
				console.log(blobOrFile)
			};
			xhr.send(blobOrFile);
		}
		
		document.querySelector('input[type="file"]').addEventListener('change', function(e) {
			var blob = this.files[0];
			
			const BYTES_PER_CHUNK = 1024 * 1024; // 1MB chunk sizes.
			const SIZE = blob.size;
			
			var start = 0;
			var end = BYTES_PER_CHUNK;
			
			while(start < SIZE) {
				
				// Note: blob.slice has changed semantics and been prefixed. See http://goo.gl/U9mE5.
				var slice = blob.mozSlice || blob.webkitSlice || blob.slice, chunk = slice.call(blob,start, end)
				
				upload(chunk);
				
				start = end;
				end = start + BYTES_PER_CHUNK;
			}
		}, false);
	
    </script>    
</body>
</html>